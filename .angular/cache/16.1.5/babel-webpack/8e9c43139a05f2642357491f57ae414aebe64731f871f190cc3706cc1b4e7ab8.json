{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let StudentListComponent = class StudentListComponent {\n  //לסדר מחיקה מול השרת\n  deleatStudent(student) {\n    for (let s of this.students) {\n      if (s.id == student) {\n        let studentToDeleate = s;\n        let studentToDeleate1 = this.students.indexOf(studentToDeleate);\n        this.students.splice(studentToDeleate1, 1);\n      }\n    }\n  }\n  // showTest(tests: Test[], id: string) {\n  //   this.selectedTest = tests;\n  //   this.idS = id;\n  // }\n  addStudent() {}\n  getFromServer() {\n    this._studentService.getFromServer().subscribe(data => {\n      this.students = data;\n    });\n  }\n  getFromServerByActive(active) {\n    this._studentService.getFromServerByActive(active).subscribe(data => {\n      this.students = data;\n    });\n  }\n  postInServer(student) {\n    this._studentService.postInServer(student).subscribe(data => {\n      if (data) {\n        this.getFromServer();\n      } else {\n        alert(\"the adding didn't succeed\");\n      }\n    });\n  }\n  putInServer(id, student) {\n    this._studentService.putInServer(id, student).subscribe(data => {\n      if (data) {\n        this.getFromServer();\n      } else {\n        alert(\"the update didn't succeed\");\n      }\n    });\n  }\n  deleatFromServer() {}\n  constructor(_studentService, _router) {\n    this._studentService = _studentService;\n    this._router = _router;\n  }\n  ngOnInit() {\n    this._studentService.getFromServer().subscribe(data => {\n      this.students = data;\n    });\n  }\n};\nStudentListComponent = __decorate([Component({\n  selector: 'student-list',\n  templateUrl: './student-list.component.html'\n})], StudentListComponent);","map":{"version":3,"names":["Component","StudentListComponent","deleatStudent","student","s","students","id","studentToDeleate","studentToDeleate1","indexOf","splice","addStudent","getFromServer","_studentService","subscribe","data","getFromServerByActive","active","postInServer","alert","putInServer","deleatFromServer","constructor","_router","ngOnInit","__decorate","selector","templateUrl"],"sources":["C:\\Users\\user1\\Desktop\\angular\\angular_p\\src\\app\\modules\\student\\components\\student-list\\student-list.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Student, Years } from '../../models/student.model';\nimport { Test } from '../../models/test.model';\nimport { StudentService } from '../../student.service';\n\n@Component({\n  selector: 'student-list',\n  templateUrl: './student-list.component.html'\n\n})\nexport class StudentListComponent {\n\n  selectedStudent?: Student;\n  selectedTest!: Test[];\n  newStudent!: boolean;\n  //לסדר מחיקה מול השרת\n  deleatStudent(student: string) {\n    for (let s of this.students) {\n      if (s.id == student) {\n        let studentToDeleate = s;\n        let studentToDeleate1 = this.students.indexOf(studentToDeleate);\n        this.students.splice(studentToDeleate1, 1);\n      }\n    }\n  }\n\n  // showTest(tests: Test[], id: string) {\n  //   this.selectedTest = tests;\n  //   this.idS = id;\n\n  // }\n\n  addStudent() {\n\n\n  }\n\n\n  getFromServer(){\n    this._studentService.getFromServer().subscribe(data=>{\n      this.students=data;\n     });\n  }\n  getFromServerByActive(active:boolean){\n    this._studentService.getFromServerByActive(active).subscribe(data=>{\n      this.students=data;\n    });\n  }\n  postInServer(student:Student){\n    this._studentService.postInServer(student).subscribe(data=>{\n     if(data){\n      this.getFromServer();\n     }\n     else{\n      alert(\"the adding didn't succeed\")\n     }\n    })\n  }\n  putInServer(id:number, student:Student){\n    this._studentService.putInServer(id,student).subscribe(data=>{\n      if(data){\n        this.getFromServer();\n       }\n       else{\n        alert(\"the update didn't succeed\")\n       }\n      })\n  }\n  deleatFromServer(){\n\n  }\n  constructor(private _studentService: StudentService,private _router:R) {\n  }\n  students!: Student[];\n\n  ngOnInit(){\n    this._studentService.getFromServer().subscribe(data=>{\n      this.students=data;\n     });\n  }\n}\n\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,WAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAK/B;EACAC,aAAaA,CAACC,OAAe;IAC3B,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACC,QAAQ,EAAE;MAC3B,IAAID,CAAC,CAACE,EAAE,IAAIH,OAAO,EAAE;QACnB,IAAII,gBAAgB,GAAGH,CAAC;QACxB,IAAII,iBAAiB,GAAG,IAAI,CAACH,QAAQ,CAACI,OAAO,CAACF,gBAAgB,CAAC;QAC/D,IAAI,CAACF,QAAQ,CAACK,MAAM,CAACF,iBAAiB,EAAE,CAAC,CAAC;;;EAGhD;EAEA;EACA;EACA;EAEA;EAEAG,UAAUA,CAAA,GAGV;EAGAC,aAAaA,CAAA;IACX,IAAI,CAACC,eAAe,CAACD,aAAa,EAAE,CAACE,SAAS,CAACC,IAAI,IAAE;MACnD,IAAI,CAACV,QAAQ,GAACU,IAAI;IACnB,CAAC,CAAC;EACL;EACAC,qBAAqBA,CAACC,MAAc;IAClC,IAAI,CAACJ,eAAe,CAACG,qBAAqB,CAACC,MAAM,CAAC,CAACH,SAAS,CAACC,IAAI,IAAE;MACjE,IAAI,CAACV,QAAQ,GAACU,IAAI;IACpB,CAAC,CAAC;EACJ;EACAG,YAAYA,CAACf,OAAe;IAC1B,IAAI,CAACU,eAAe,CAACK,YAAY,CAACf,OAAO,CAAC,CAACW,SAAS,CAACC,IAAI,IAAE;MAC1D,IAAGA,IAAI,EAAC;QACP,IAAI,CAACH,aAAa,EAAE;OACpB,MACG;QACHO,KAAK,CAAC,2BAA2B,CAAC;;IAEpC,CAAC,CAAC;EACJ;EACAC,WAAWA,CAACd,EAAS,EAAEH,OAAe;IACpC,IAAI,CAACU,eAAe,CAACO,WAAW,CAACd,EAAE,EAACH,OAAO,CAAC,CAACW,SAAS,CAACC,IAAI,IAAE;MAC3D,IAAGA,IAAI,EAAC;QACN,IAAI,CAACH,aAAa,EAAE;OACpB,MACG;QACHO,KAAK,CAAC,2BAA2B,CAAC;;IAEpC,CAAC,CAAC;EACN;EACAE,gBAAgBA,CAAA,GAEhB;EACAC,YAAoBT,eAA+B,EAASU,OAAS;IAAjD,KAAAV,eAAe,GAAfA,eAAe;IAAyB,KAAAU,OAAO,GAAPA,OAAO;EACnE;EAGAC,QAAQA,CAAA;IACN,IAAI,CAACX,eAAe,CAACD,aAAa,EAAE,CAACE,SAAS,CAACC,IAAI,IAAE;MACnD,IAAI,CAACV,QAAQ,GAACU,IAAI;IACnB,CAAC,CAAC;EACL;CACD;AAtEYd,oBAAoB,GAAAwB,UAAA,EALhCzB,SAAS,CAAC;EACT0B,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE;CAEd,CAAC,C,EACW1B,oBAAoB,CAsEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}